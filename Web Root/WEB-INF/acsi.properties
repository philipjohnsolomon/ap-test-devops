################################################################################
# Properties specific to the support of ACSI
################################################################################
## ACSI properties - engages correct implementations for various application ACSI extensions
security.profile_classname=com.agencyport.security.profile.builtin.PortalSecurityProfile
security.profile_manager_classname=com.agencyport.security.profile.builtin.BuiltinSecurityProfileManager
security.credentials_agent_classname=com.agencyport.security.credentials.BuiltinCredentialsAgent

################################################################################
# The default encryption algorithm, mode and padding cipher transformation
################################################################################
security.Blowfish.cipher_transformation=Blowfish/ECB/PKCS5Padding

############################################################
# ACSI
# Factory list for implementations of com.agencyport.security.resource.ISecureResourceFactory interface.
# Each factory implementation is a factory for a com.agencyport.security.resource.ISecureResource instance 
# which is sensitive to the current security profile.
# Examples of secure resources are menus and front servlet (front controller).
# These are used by security filter. The menu resource is also used 
# to support the menu UI.
############################################################
secure_resource_factories=com.agencyport.secure.menu.provider.SecureMenuFactory;\
com.agencyport.secure.front.SecureFrontControllerFactory;\
com.agencyport.servlets.domXML.secure.SecureDebugProviderResourceFactory;

############################################################
# ACSI  
# Role to policy type mapping for securing front controller resource (FrontServlet)
# see com.agencyport.secure.front.SecureFrontController. For systems
# which put an intrinsic value on the role name itself and do not embrace
# permission based authorization. This is here only as a 
# reference point. The LOB demo application embraces permissions
# rather than just role names for authorization.
############################################################
#Roles.COMMERCIAL_POLICY_TYPE=agent;agentcl;underwriter;underwritercl;admin
#Roles.PERSONAL_POLICY_TYPE=agent;agentpl;underwriter;underwriterpl;admin;turneragentrole
#Roles.FARMRANCH_POLICY_TYPE=agent;agentfr;underwriter;underwriterfr;admin

############################################################
# ACSI - CSRF protection configuration
# CSRF supports a list of URIs and methods (POST, GET) which
# the framework will protect against potential CSRF attacks.
# The configuration is formatted as a list of URIs delimited by semi-colons with
# the specific methods within parenthesis following each URI
# each method delimited with a comma.   
############################################################
security.csrf_uri_include_list=FrontServlet(POST,GET);\
WorkItemAction(POST,GET);\
api(*)

# Setting the following flag to false will deactivate CSRF protection. This should only be turned off during 
# performance testing and no other circumstance.
security.csrf_protection=true

############################################################
# ACSI - Work Item and Account Action Verification Configuration
# the framework will verify that user has the authority to execute the action on work items and accounts. 
############################################################
# Setting the following flag to false will deactivate work item action verification.
security.verify_work_item_actions=true
# The following map relates incoming work item action values to their permission name counterparts. This is used to verify that user has the authority to execute 
# the incoming action on the work item.
security.action_to_permission_map=MoveWorkItems,accessCanMove;\
MergeAccount,accessCanMerge;\
Delete,accessCanDelete;\
Copy,accessCanCopy;\
View,accessCanViewAccount;\
Open,accessCanOpen;\
Claim,accessCanClaim;\
Approve,accessCanApprove;\
Endorse,accessCanEndorse;\
Link,accessCanLink

############################################################
# ACSI - URL Verification Configuration
# the framework will verify URLs redirected to. 
############################################################
# Setting the following flag to false will deactivate url verification.
security.verify_urls=true
# The following list provides a white list of valid starting sequences for URLs
security.valid_url_start_sequences=${my_portal_app};\
${APPLICATION_NAME};\
/${APPLICATION_NAME};\
DisplayHomePage

security.valid_forward_resource_extensions=jsp
security.invalid_forward_url_tokens=WEB-INF;META-INF;..;\\;*;:;
############################################################
# ACSI - Underlying details configuration
# The following flag should be turned to false for all production
# implementations. On any AP security exception, if this flag
# is true then a generic secure message text will be delivered
# to the sender.  
############################################################
security.reveal_exception_details=true

############################################################
# ACSI - Secure HTTP response headers
# The following list contains a set of entries delimited 
#by an ampersand character where each entry is a response header name 
#and value delimited by a tilda. Think of ~ like an equals sign. These are a set of
# HTTP response headers that improve the security ratings.
# If you need to turn it off use the boolean flag.
############################################################
security.add_secure_response_headers=true
security.content_security_policy=default-src 'none';object-src 'self';style-src 'self' 'unsafe-inline';img-src 'self';
security.content_security_policy+=form-action 'self';media-src 'self';font-src 'self';connect-src 'self';
security.content_security_policy+=plugin-types application/pdf application/x-shockwave-flash;reflected-xss block;
security.content_security_policy+=script-src 'self' 'unsafe-inline' 'unsafe-eval'; frame-src 'self' 
security.secure_response_headers=X-Content-Type-Options~nosniff
security.secure_response_headers+=&X-Frame-Options~SAMEORIGIN
security.secure_response_headers+=&X-XSS-Protection~1;mode=block
security.secure_response_headers+=&Content-Security-Policy~${security.content_security_policy}


############################################################
# Standard application HTTP response headers
# The following list contains a set of entries delimited 
# by an ampersand character where each entry is a response header name 
# and value delimited by a tilda. Think of ~ like an equals sign. These are a set of
# HTTP response headers that used to be hard coded in APBaseServlet.java.
############################################################
application.standard_response_headers=Pragma~No-cache
application.standard_response_headers+=&Cache-Control~no-cache,max-age=0,must-revalidate,no-store
application.standard_response_headers+=&Expires~Thu, 01 Jan 1970 00:00:00 GMT

############################################################
# ACSI - Input validation list uses white list based validation.  
# Each entry in the list is delimited with a semi-colon.
# Each input validator entry contains up to 3 parts delimited by a comma where 
# the first part is the parameter name. A parameter name of * means that
# the validation applies to ALL parameters on every request.
# the second part is the name of the class that implements
# the com.agencyport.security.validation.IInputValidator interface
# There can be an optional 3rd part that is passed to the constructor
# of the input validation instance on creation.
############################################################
def_package=com.agencyport.security.validation
security.input_validation_map=rnd,${def_package}.DoubleValidator;\
WORKITEMID,${def_package}.IntegerValidator;\
FIRST_TIME,${def_package}.BooleanValidator;\
PAGE_NAME,${def_package}.PageValidator,launchPASRequest~WorkItemAssistantFileAttachment~PolicyChangePDF;\
TRANSACTION_NAME,${def_package}.TransactionValidator;\
METHOD,${def_package}.OneOfValidator,Process~Display~ProcessEdit~ProcessCopy;\
TRANSACTIONSTARTPOINT,${def_package}.BooleanValidator;\
WorkListType,${def_package}.WorkListTypeValidator;\
action,${def_package}.ActionValidator,Open~Delete~Claim~Approve~Copy~ViewAccount~Merge~Move~Link~Endorse~GetWorkItemActions~\
MergeAccount~MoveWorkItems~WorkItemAssistantFileAttachment;\
AutoSave,${def_package}.BooleanValidator;\
workItemId,${def_package}.IntegerValidator;\
AccountNumber,${def_package}.RegExValidator,${bad.accountnum.pattern}~true;\
RqUID,${def_package}.RegExValidator,${bad.guid.pattern}~true;\
AccountSystemId,${def_package}.RegExValidator,${bad.guid.pattern}~true;\
AccountHolderSystemId,${def_package}.RegExValidator,${bad.guid.pattern}~true;\
CurCd,${def_package}.RegExValidator,${bad.currency.pattern}~true;\
BroadLOBCd,${def_package}.RegExValidator,[PCU]~true;\
SystemId,${def_package}.RegExValidator,${bad.guid.pattern}~true;\
*,${def_package}.MaxSizeValidator,2048;\
*,${def_package}.RegExValidator,${bad.format.string.pattern}~true;\
interestLevel,${def_package}.IntegerValidator;\
pos,${def_package}.IntegerValidator;\
isOrigin,${def_package}.BooleanValidator

bad.accountnum.pattern=[^a-z^A-Z^0-9^\-^_]
bad.guid.pattern=[^GUID()^a-f^A-F^0-9^\-]
bad.currency.pattern=[^A-Z^0-9]
bad.format.string.pattern=(%%)|(%p)|(%d)|(%c)|(%u)|(%x)|(%s)|(%n)

############################################################
# ACSI - SQL injection validation.
# A list of regular expressions to run against all 
# input parameters.
############################################################
security.sql_injection_patterns=\w*('|")\s*((or)|(and)).*\-\-
#security.sql_injection_patterns=\w*('|")\s*((or)|(and)).*

############################################################
# ACSI - XSS validation.
# A list of regular expressions to run against all 
# input parameters.
# See http://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html
############################################################
security.xss_patterns=<script>(.*?)</script>;\
src[\r\n]*=[\r\n]*\'(.*?)\';\
</script>;\
<script(.*?)>;\
eval\((.*?)\);\
expression\((.*?)\);\
javascript:;\
vbscript:;\
onload(.*?)=
